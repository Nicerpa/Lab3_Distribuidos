syntax="proto3";

package FulcrumProto;
option go_package = "github.com/Lab3";
import "google/protobuf/empty.proto";

/*
    TODO: Metodos de consistencia
*/

service FulcrumServer {
    // Broker
    rpc GetClock (PlanetData) returns (PlanetClock) {}

    // Leia -> Broker (Leia a traves de Broker)
    rpc GetNumber (CityData) returns (CityRes) {}

    // Informantes
    rpc AddCity (NewCity) returns (CityStatus) {}

    rpc DeleteCity (DelCity) returns (CityStatus) {}

    rpc UpdateCity (UpCity) returns (CityStatus) {}

    // Metodos consistencia

    rpc RequestPlanetList (google.protobuf.Empty) returns (PlanetList) {} // Retorna la lista de planetas en el servidor

    rpc RequestLog (LogReq) returns (Log) {} // retorna el clock y el archivo log para un planeta especifico

    rpc UpdateFile (NewData) returns (Status); // Envia un nuevo clock y un archivo de planeta
}

message NewData {
    repeated string file = 1;
    repeated int32 clock = 2;
    string planet = 3;
}

message Status {
    int32 statusFlag = 1;
}

message LogReq {
    string name = 2;
}

message Log {
    repeated string logFile = 1;
    repeated int32 clock = 2;
}

message PlanetList {
    repeated string list = 1;   
}

message PlanetData {
    string planet = 1;
}

message PlanetClock {
    repeated int32 clock = 1;
}

message CityData {
    string planet = 1;
    string city = 2;
}

message CityRes {
    repeated int32 clock = 1;
    int32 rebelds = 2;
}

message NewCity {
    string planet = 1;
    string city = 2;
    int32 rebelds = 3; // 0 si no se especifica
}

message DelCity {
    string planet = 1;
    string city = 2;
}

message UpCity {
    string planet = 1;
    string city = 2;
    int32 flag = 3; // 1 -> modificar nombre; 0 -> modificar cantidad
    string newname = 4; // flag = 0 -> default value ""
    int32 num = 5; // flag = 1 -> default value -1
}

message CityStatus {
    repeated int32 clock = 1;
}