// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Lab3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerServerClient is the client API for BrokerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServerClient interface {
	GetNumberRebelds(ctx context.Context, in *LeiaReq, opts ...grpc.CallOption) (*Rebelds, error)
	GetIPCity(ctx context.Context, in *CityData, opts ...grpc.CallOption) (*CityRes, error)
}

type brokerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServerClient(cc grpc.ClientConnInterface) BrokerServerClient {
	return &brokerServerClient{cc}
}

func (c *brokerServerClient) GetNumberRebelds(ctx context.Context, in *LeiaReq, opts ...grpc.CallOption) (*Rebelds, error) {
	out := new(Rebelds)
	err := c.cc.Invoke(ctx, "/BrokerProto.BrokerServer/GetNumberRebelds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServerClient) GetIPCity(ctx context.Context, in *CityData, opts ...grpc.CallOption) (*CityRes, error) {
	out := new(CityRes)
	err := c.cc.Invoke(ctx, "/BrokerProto.BrokerServer/GetIPCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServerServer is the server API for BrokerServer service.
// All implementations must embed UnimplementedBrokerServerServer
// for forward compatibility
type BrokerServerServer interface {
	GetNumberRebelds(context.Context, *LeiaReq) (*Rebelds, error)
	GetIPCity(context.Context, *CityData) (*CityRes, error)
	mustEmbedUnimplementedBrokerServerServer()
}

// UnimplementedBrokerServerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServerServer struct {
}

func (UnimplementedBrokerServerServer) GetNumberRebelds(context.Context, *LeiaReq) (*Rebelds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberRebelds not implemented")
}
func (UnimplementedBrokerServerServer) GetIPCity(context.Context, *CityData) (*CityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPCity not implemented")
}
func (UnimplementedBrokerServerServer) mustEmbedUnimplementedBrokerServerServer() {}

// UnsafeBrokerServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServerServer will
// result in compilation errors.
type UnsafeBrokerServerServer interface {
	mustEmbedUnimplementedBrokerServerServer()
}

func RegisterBrokerServerServer(s grpc.ServiceRegistrar, srv BrokerServerServer) {
	s.RegisterService(&BrokerServer_ServiceDesc, srv)
}

func _BrokerServer_GetNumberRebelds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeiaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServerServer).GetNumberRebelds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerProto.BrokerServer/GetNumberRebelds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServerServer).GetNumberRebelds(ctx, req.(*LeiaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServer_GetIPCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServerServer).GetIPCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BrokerProto.BrokerServer/GetIPCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServerServer).GetIPCity(ctx, req.(*CityData))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerServer_ServiceDesc is the grpc.ServiceDesc for BrokerServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BrokerProto.BrokerServer",
	HandlerType: (*BrokerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberRebelds",
			Handler:    _BrokerServer_GetNumberRebelds_Handler,
		},
		{
			MethodName: "GetIPCity",
			Handler:    _BrokerServer_GetIPCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BrokerProto/BrokerProto.proto",
}
